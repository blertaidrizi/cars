@page "/clients/{CarId}"
@using CarGo.Models
@using CarGo.Data
@using BlazorBootstrap
@rendermode InteractiveServer
@inject appDbContext dbContext
@inject NavigationManager Navigation
@inject IHttpContextAccessor HttpContextAccessor

<PageTitle>Car Details</PageTitle>
<ConfirmDialog @ref="dialog" />
<Toasts class="p-3" Messages="messages" AutoHide="true" StackLength="3" Placement="ToastsPlacement.TopRight" />
<h3 class="text-center mb-4 fw-bold text-black display-5"> Car Details</h3>

@if (car != null)
{
    <div class="container shadow-lg p-4 rounded-4 bg-light">
        <div class="d-flex flex-wrap gap-2 mt-4">
            <button class="btn" Size="ButtonSize.Small" @onclick="OnGoBack">⬅️ Back to List</button>
        </div>
        <div class="row">
            <!-- Car Image Carousel -->
            <div class="col-md-6 mb-4 mb-md-0">
                @if (images.Any())
                {
                    <div id="carouselExampleFade" class="carousel slide carousel-fade">
                        <div class="carousel-inner rounded-4 shadow-sm">
                            @for (int i = 0; i < images.Count; i++)
                            {
                                <div class="carousel-item @(i == 0 ? "active" : "")">
                                    <img src="@images[i].Url" class="d-block w-100 rounded-4" alt="Car Image">
                                </div>
                            }
                        </div>
                        <button class="carousel-control-prev" type="button" data-bs-target="#carouselExampleFade" data-bs-slide="prev">
                            <span class="carousel-control-prev-icon fs-4"></span>
                        </button>
                        <button class="carousel-control-next" type="button" data-bs-target="#carouselExampleFade" data-bs-slide="next">
                            <span class="carousel-control-next-icon fs-4"></span>
                        </button>
                    </div>
                }
                else
                {
                    <p class="text-center text-muted fst-italic">No images available for this car.</p>
                }
            </div>

            <!-- Car Details -->
            <div class="col-md-6">
                <h4 class="fw-bold text-dark mb-4">@car.Brand @car.Model (@car.Year)</h4>

                <!-- Car Specifications with Icons -->
                <div class="list-group list-group-flush">
                    <div class="list-group-item d-flex align-items-center">
                        <i class="fas fa-cogs fa-2x text-secondary me-3"></i>
                        <span><strong>Transmission:</strong> @car.Transmission</span>
                    </div>
                    <div class="list-group-item d-flex align-items-center">
                        <i class="fas fa-tachometer-alt fa-2x text-secondary me-3"></i>
                        <span><strong>Kilometers:</strong> @car.Km km</span>
                    </div>
                    <div class="list-group-item d-flex align-items-center">
                        <i class="fas fa-horse fa-2x text-secondary me-3"></i>
                        <span><strong>Horsepower:</strong> @car.Hp HP</span>
                    </div>
                    <div class="list-group-item d-flex align-items-center">
                        <i class="fas fa-gas-pump fa-2x text-secondary me-3"></i>
                        <span><strong>Fuel Type:</strong> @car.Fuel</span>
                    </div>
                    <div class="list-group-item d-flex align-items-center">
                        <i class="fas fa-palette fa-2x text-secondary me-3"></i>
                        <span><strong>Color:</strong> @car.Color</span>
                    </div>
                    <div class="list-group-item d-flex align-items-center">
                        <i class="fas fa-leaf fa-2x text-secondary me-3"></i>
                        <span><strong>Emission Class:</strong> @car.EmissionClass</span>
                    </div>
                    <div class="list-group-item d-flex align-items-center">
                        <i class="fas fa-map-marker-alt fa-2x text-secondary me-3"></i>
                        <span><strong>Location:</strong> @car.Location</span>
                    </div>
                    <div class="list-group-item d-flex align-items-center">
                        <i class="fas fa-calendar-alt fa-2x text-secondary me-3"></i>
                        <span><strong>Listed On:</strong> @car.CreatedAt.ToShortDateString()</span>
                    </div>
                    <div class="text-end mt-5">
                        <span class="fw-bold display-6 text-dark">€@car.Price</span>
                    </div>
                </div>
            </div>
        </div>

        @if (interestedClients.Any())
        {
            <div class="mt-5">
                <h4 class="fw-bold text-dark mb-4">Interested Clients</h4>

                <table class="table">
                    <thead>
                        <tr>
                            <th scope="col">First Name</th>
                            <th scope="col">Last Name</th>
                            <th scope="col">Email</th>
                            <th scope="col">Status</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var user in interestedClients)
                        {
                            var offer = dbContext.Orders.FirstOrDefault(o => o.BuyerId == user.Id && o.CarId == int.Parse(CarId));
                            <tr>
                                <td>@user.FirstName</td>
                                <td>@user.LastName</td>
                                <td>@user.Email</td>
                                <td>
                                    @if (offer != null)
                                    {
                                        <span class="badge @(offer.SellerStatus == "Accepted Offer" ? "bg-success" : offer.SellerStatus == "Rejected Offer" ? "bg-danger" : "bg-secondary")">
                                            @offer.SellerStatus
                                        </span>
                                    }
                                    else
                                    {
                                        <span class="text-muted fst-italic">No status</span>
                                    }
                                </td>
                                <td>
                                    @if (offer == null || offer.SellerStatus == null || offer.SellerStatus == "")
                                    {
                                        <button class="btn btn-success btn-sm me-2" @onclick="() => OnAcceptOffer(user.Id)">Accept</button>
                                        <button class="btn btn-danger btn-sm" @onclick="() => OnRefuseOffer(user.Id)">Refuse</button>
                                    }
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <p class="text-center text-muted fst-italic mt-5">No clients have expressed interest in this car yet.</p>
        }


    </div>
}
else
{
    <p class="text-danger text-center fw-bold mt-5">❌ Car details not found.</p>
    <div class="text-center">
        <button class="btn btn-outline-secondary shadow-sm" @onclick="OnGoBack">⬅️ Back to List</button>
    </div>
}

@code {
    [Parameter]
    public string CarId { get; set; }

    private Car car;
    private List<CarGo.Models.Image> images = new();
    private User user { get; set; }
    private User account { get; set; }
    public Order order { get; set; }

    private List<User> interestedClients = new();

    List<ToastMessage> messages = new List<ToastMessage>();

    private void ShowMessage(ToastType toastType) 
    { 
        messages.Add(CreateToastMessage(toastType));
        StateHasChanged();
    }

    private ToastMessage CreateToastMessage(ToastType toastType)
    => new ToastMessage
        {
            Type = toastType,
            Title = "Seller Contacted",
            HelpText = $"{DateTime.Now}",
            Message = $"Hello, {account.FirstName}! The seller has been contacted, wait for a reply these next days.",
        };

    private ConfirmDialog dialog = default!;

    private async Task ShowSaveConfirmationAsync()
    {
        var options = new ConfirmDialogOptions
            {
                YesButtonText = "OK",
                YesButtonColor = ButtonColor.Success,
                NoButtonText = "CANCEL",
                NoButtonColor = ButtonColor.Danger
            };

        var confirmation = await dialog.ShowAsync(
            title: "Simple Confirm Dialog",
            message1: "Do you want to proceed?",
            confirmDialogOptions: options);

        if (confirmation)
        {


        }
        else
        {
            // do something
        }
    }

    protected override void OnInitialized()
    {
        if (int.TryParse(CarId, out int carId))
        {
            car = dbContext.Cars.FirstOrDefault(c => c.Id == carId);
            images = dbContext.Images.Where(img => img.CarId == carId).ToList();
            user = dbContext.Users.First(u => u.Id == car.SellerId);

            // Fetch clients interested in this car
            List<int> interestedUsers = dbContext.Orders
                .Where(o => o.CarId == carId).Select(u => u.BuyerId).ToList();

            interestedClients = dbContext.Users
           .Where(u => interestedUsers.Contains(u.Id))
           .ToList();;
        }
    }

    private void OnGoBack()
    {
        Navigation.NavigateTo("/cars");
    }

    private async Task OnAcceptOffer(int clientId)
    {
        var inspector = dbContext.Users.First(u => u.Role == "Inspector");
        var client = dbContext.Users.FirstOrDefault(u => u.Id == clientId);
        if (client != null)
        {
            var acceptedOffer = dbContext.Orders.FirstOrDefault(o => o.BuyerId == clientId && o.CarId == int.Parse(CarId));
            if (acceptedOffer != null)
            {
                acceptedOffer.SellerStatus = "Accepted Offer";
                acceptedOffer.SoldTime = DateTime.Now;
                acceptedOffer.InspectorId = inspector.Id;

                var otherOffers = dbContext.Orders
                    .Where(o => o.CarId == int.Parse(CarId) && o.BuyerId != clientId)
                    .ToList();

                foreach (var offer in otherOffers)
                {
                    offer.SellerStatus = "Rejected Offer";
                }
                car.Status = "Sold";

                dbContext.SaveChanges();
                StateHasChanged();
                ShowMessage(ToastType.Success);
            }
        }
    }



    private async Task OnRefuseOffer(int clientId)
    {
        var client = dbContext.Users.FirstOrDefault(u => u.Id == clientId);
        if (client != null)
        {
            var offer = dbContext.Orders.FirstOrDefault(o => o.BuyerId == clientId && o.CarId == int.Parse(CarId));
            if (offer != null)
            {
                offer.SellerStatus = "Rejected Offer";
                await dbContext.SaveChangesAsync();
                StateHasChanged();
                ShowMessage(ToastType.Warning);
            }
        }
    }


}

